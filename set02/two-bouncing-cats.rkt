#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 6973 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 184
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname two-bounc"
 #"ing-cats) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #("
 #"#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 17 3 22 #";; Two draggable cats."
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; They are individually draggable. "
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; But space pauses or unpauses the entire system."
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; like falling cat, but user can drag the cat with the mouse."
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; button-down to select, drag to move, button-up to release. "
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; When the cat is dragged outside the canvas it should"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; bounce back inside the canvas."
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; A cat falls from the top of the scene."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; start with (main 0)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 16 #"rackunit/text-ui"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 10 #"cat-north?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 10 #"cat-south?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 9 #"cat-east?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 9 #"cat-west?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 16 #"world-after-tick"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; MAIN FUNCTION."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; main : Number -> World"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; GIVEN: the initial y-position of the cats"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; EFFECT: runs the simulation, starting with the cats falling"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; RETURNS: the final state of the world"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 11 #"initial-pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 14 3 11 #"initial-pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 23 3 1 #" "
0 0 14 3 16 #"world-after-tick"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"on-draw"
0 0 23 3 1 #" "
0 0 14 3 14 #"world-to-scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 23 3 1 #" "
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 8 #"on-mouse"
0 0 23 3 1 #" "
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; CONSTANTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 2 #" ("
0 0 14 3 6 #"bitmap"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"cat.png\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"ZERO"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; how fast the cat falls, in pixels/tick"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; dimensions of the canvas"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 3 #"450"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT2-X-COORD"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"image-at-20"
0 0 23 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; dimensions of the cat"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 23 3 2 #"  "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;; DATA DEFINITIONS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cat1"
0 0 23 3 1 #" "
0 0 14 3 4 #"cat2"
0 0 23 3 1 #" "
0 0 14 3 7 #"paused?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; A World is a (make-world Cat Cat Boolean)"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; cat1 and cat2 are the two cats"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; paused? describes whether or not the world is paused"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; world-fn : World -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; (define (world-fn w)"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";;   (... (world-cat1 w) (world-cat2 w) (world-paused? w)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"cat"
0 0 23 3 2 #" ("
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; A Cat is a (make-cat Number Number Boolean Direction)"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Interpretation: "
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; x-pos, y-pos give the position of the cat. "
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; selected? describes whether or not the cat is selected."
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; dir gives the Direction in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 20 #"; cat-fn : Cat -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";(define (cat-fn c)"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; (... (cat-x-pos c) (cat-y-pos c) (cat-selected? c)(cat-dir c)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; examples of worlds, for testing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"selected-cat-at-20"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-20"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"selected-cat-at-28"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-28"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; A CatKeyEvent is a KeyEvent, which is one of"
0 0 23 29 1 #"\n"
0 0 17 3 56
#";; -- \" \"                (interpretation: pause/unpause)"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; -- \"up\"               (interpretation: up arrow key)"
0 0 23 29 1 #"\n"
0 0 17 3 57
#";; -- \"down\"             (interpretation: down arrow key)"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; -- \"right\"            (interpretation: right arrow key)"
0 0 23 29 1 #"\n"
0 0 17 3 57
#";; -- \"left\"             (interpretation: left arrow key)"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; -- any other KeyEvent (interpretation: ignore)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; cat-kev-fn : CatKeyEvent -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";(define (cat-kev-fn kev)"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";  (cond "
0 0 23 29 1 #"\n"
0 0 17 3 22 #";    [(key=? kev \" \") "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";     ...]"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";    [(key=? kev \"up\") "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";     ...]"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";    [(key=? kev \"down\") "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";     ...]"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";    [(key=? kev \"right\") "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";     ...]"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";    [(key=? kev \"left\") "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";     ...]"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";    [else "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";     ...]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; examples for testing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"pause-key-event"
0 0 23 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 19 #"non-pause-key-event"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"left-key-event"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"right-key-event"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"up-key-event"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"down-key-event"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; A CatMouseEvent is a MouseEvent that is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; -- \"button-down\"   (interpretation: select the cat)"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; -- \"drag\"          (interpretation: drag the cat)"
0 0 23 29 1 #"\n"
0 0 17 3 56
#";; -- \"button-up\"     (interpretation: unselect the cat)"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; -- any other mouse event (interpretation: ignored)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";template:"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";cat-mouse-event : CatMouseEvent mev -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define (mev-fn mev)"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";    [(mouse=? mev \"button-down\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";    [(mouse=? mev \"drag\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";    [(mouse=? mev \"button-up\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";    [else ...]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";A Direction is one of the following:"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; -- \"north\" (interp: north direction)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; -- \"south\" (interp: south direction)"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; -- \"east\" (interp: east direction)"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; -- \"west\" (interp: west direction)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";template"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";dir-fn: Direction-> ??"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";(define dir-fn dir)"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";(cond"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";[(string=? dir \"north\")...]"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";[(string=? dir \"south\")...]"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";[(string=? dir \"east\")...]"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";[(string=? dir \"west\")...]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";;; END DATA DEFINITIONS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; world-after-tick : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; GIVEN: a World w"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; RETURNS: the World that should follow w after a tick."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; (world-after-tick (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 18 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 18 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 18 #"world-after-tick ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 9 #")true))->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 7 #") true)"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; DESIGN STRATEGY: Structural decomposition on w : World "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"world-after-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 1 #"w"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"))("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; cat-after-tick : Cat -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a cat c"
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; RETURNS: the state of the given cat after a tick if it were in an"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; unpaused world."
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; cat selected:"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #"; (cat-after-tick selected-cat-at-20) -> (make-cat 150 20 true \"nor"
 #"th\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 13 #"; cat paused:"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; (cat-after-tick unselected-cat-at-20) -> (make-cat 150 28 false \""
 #"south\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #"; DESIGN STRATEGY: Structural decomposition on c : Cat "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; cat-after-tick-helper : Number Number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; GIVEN: a position and a value for selected? and the direction"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: the cat that should follow one in the given position in a"
 #"n"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #"; unpaused world"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (cat-after-tick-helper 18 22 true \"north\")->"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 18 22 true \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; (cat-after-tick-helper 180 220 false \"east\")->"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; (make-cat 188 220 false \"east\")"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; STRATEGY: Structural Decomposition on dir : Direction"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #")("
0 0 14 3 12 #"north-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #")("
0 0 14 3 12 #"south-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #")("
0 0 14 3 11 #"east-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #")("
0 0 14 3 11 #"west-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 5 #")])))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; north-helper : Number number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: the X and Y coordinates of the cat along with a "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; boolean value to suggest if the cat is selected or not "
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; and the direction in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; (north-helper"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 9 #"20 true \""
0 0 17 3 5 #"north"
0 0 17 3 17 #"\")->(make-cat 10 "
0 6          10 17 6 #"133/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 17 3 14 #" true \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; (north-helper 200 150 true \"north\")->(make-cat 200 142 true \"no"
 #"rth\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; DEFINITON:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"north-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 10 #")))       "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; south-helper : Number number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: the X and Y coordinates of the cat along with a "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; boolean value to suggest if the cat is selected or not "
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; and the direction in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 66
(
 #"; (south-helper 10 20 true \"nort"
 #"h\")->(make-cat 10 28 true \"south\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; (south-helper 200 150 true \"south\")->(make-cat 200 158 true \"so"
 #"uth\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; DEFINITON:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"south-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #") "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #"  "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; east-helper : Number number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: the X and Y coordinates of the cat along with a "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; boolean value to suggest if the cat is selected or not "
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; and the direction in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; (east-helper 10 20 true \"east\")->(make-cat 18 20 true \"east\")"
0 0 23 29 1 #"\n"
0 0 17 3 67
(
 #"; (east-helper 200 150 true \"west\")->(make-cat 208 150 true \"east"
 #"\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; DEFINITON:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"east-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #") "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; west-helper : Number number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: the X and Y coordinates of the cat along with a "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; boolean value to suggest if the cat is selected or not "
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; and the direction in which the cat is moving."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; (west-helper 10 20 true \""
0 0 17 3 4 #"west"
0 0 17 3 14 #"\")->(make-cat "
0 6          10 17 5 #"91/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 17 3 16 #" 20 true \"east\")"
0 0 23 29 1 #"\n"
0 0 17 3 67
(
 #"; (west-helper 200 150 true \"west\")->(make-cat 192 150 true \"west"
 #"\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; DEFINITON:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"west-helper"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #")("
0 0 14 3 8 #"make-cat"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 5 #"y-pos"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #")("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; world-to-scene : World -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; RETURNS: a Scene that portrays the given world."
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; EXAMPLE:"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (world-to-scene (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; (place-image CAT-IMAGE CAT1-X-COORD 20 "
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; (place-image CAT-IMAGE CAT2-X-COORD 20 EMPTY-CANVAS))"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; DEFINITION: "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"world-to-scene"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"place-cat"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"place-cat"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; place-cat : Cat Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; GIVEN: A Cat and a Scene"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: A Scene like the given one, but with the given cat painte"
 #"d"
) 0 0 23 29 1 #"\n"
0 0 17 3 8 #"; on it."
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; EXAMPLE:"
0 0 23 29 1 #"\n"
0 0 17 3 57
#"; (place-cat (make-cat 10 20 true \"west\") EMPTY-CANVAS)->"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (place-image (CAT-IMAGE) 10 20 EMPTY-CANVAS)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"place-cat"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 14 3 1 #"s"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; world-after-key-event : World CatKeyEvent -> World"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; GIVEN: A World w"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; RETURNS: A World that should follow the given world"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; after the given key event."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; (world-after-key-event (initial-world 10) \"up\")->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; (world-after-key-event (initial-world 10) \" \")->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (make-cat 300 10 false \"south\") true)"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; DESIGN STRATEGY: structural decomposition on kev : CatKeyEvent"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 23 3 2 #")("
0 0 14 3 25 #"world-with-paused-toggled"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 5 #")]   "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 23 3 2 #")("
0 0 14 3 7 #"move-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 23 3 2 #")("
0 0 14 3 9 #"move-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 23 3 2 #")("
0 0 14 3 10 #"move-right"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 23 3 2 #")("
0 0 14 3 9 #"move-left"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; world-with-paused-toggled : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; RETURNS: A World just like the given one,but with paused? toggled"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; (world-with-paused-toggled (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (make-cat 300 10 false \"south\") true)"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; (world-with-paused-toggled (initial-world 35))->"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; (make-world (make-cat 150 350 false \"south\") "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 3 #"350"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 7 #") true)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: structural decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 25 #"world-with-paused-toggled"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; move-up : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: World like the previous world but with the selected"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; cat moving upwards."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; (move-up (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 7 #"move-up"
0 0 17 3 2 #" ("
0 0 17 3 13 #"initial-world"
0 0 17 3 7 #" 35))->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 8 #") false)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural Decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"move-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"up-helper"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"up-helper"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"))("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; up-helper: Cat Cat Boolean -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; GIVEN: Two Cats and the boolean value to check if the world is pau"
 #"sed."
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; (up-helper (make-cat 20 30 true \"north\"))->          "
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 20 22 true \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 9 #"up-helper"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 12 #" \"north\"))->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"42"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 9 #" \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"up-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"cat-move-up"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; cat-move-up : Number Number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; GIVEN: The X and Y coordinates of the position of the Cat"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; and a boolean value to see if it has been selected as well"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; as the direction in which the cat is moving in."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; (cat-move-up 20 30 true \"south\")->"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 20 22 true \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"cat-move-up"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; move-down : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: World like the previous world but with the selected"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; cat moving upwards."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; (move-down (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; (move-down (initial-world 35))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 35 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 8 #") false)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural Decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 11 #"down-helper"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"down-helper"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #")) ("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; down-helper: Cat Cat Boolean -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; GIVEN: Two Cats and the boolean value to check if the world is pau"
 #"sed."
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #"; (down-helper (make-cat 20 30 true \"south\"))->(make-cat 20 38 tru"
 #"e \"south\") "
) 0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 11 #"down-helper"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 2 #"80"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 12 #"\"south\"))->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 2 #"88"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 9 #" \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"down-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"cat-move-down"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; cat-move-down : Number Number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; GIVEN: The X and Y coordinates of the position of the Cat"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; and a boolean value to see if it has been selected as well"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; as the direction in which the cat is moving in."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 67
(
 #"; (cat-move-down 20 30 true \"south\")->(make-cat 20 38 true \"south"
 #"\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 13 #"cat-move-down"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 10 #"\"west\")->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 2 #"38"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 9 #" \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cat-move-down"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; move-right : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: World like the previous world but with the selected"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; cat moving upwards."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; (move-right (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (make-world (make-cat 150 10 false \"south\") "
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 10 #"move-right"
0 0 17 3 2 #" ("
0 0 17 3 13 #"initial-world"
0 0 17 3 7 #" 35))->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 8 #") false)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural Decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"move-right"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 12 #"right-helper"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"right-helper"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"))("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; right-helper: Cat Cat Boolean -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; GIVEN: Two Cats and the boolean value to check if the world is pau"
 #"sed."
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #"; (right-helper (make-cat 20 30 true \"east\"))->(make-cat 28 30 tru"
 #"e \"east\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 12 #"right-helper"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"22"
0 0 17 3 1 #" "
0 0 17 3 2 #"33"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 11 #"\"east\"))->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"33"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 8 #" \"east\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"right-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"cat-move-right"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; cat-move-right: Number Number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; GIVEN: The X and Y coordinates of the position of the Cat"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; and a boolean value to see if it has been selected as well"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; as the direction in which the cat is moving in."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 66
(
 #"; (cat-move-right 20 30 true \"ea"
 #"st\")->(make-cat 28 30 true \"east\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 14 #"cat-move-right"
0 0 17 3 1 #" "
0 0 17 3 2 #"22"
0 0 17 3 1 #" "
0 0 17 3 2 #"34"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 10 #"\"west\")->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"34"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 8 #" \"west\")"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"cat-move-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; move-left : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A World"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: World like the previous world but with the selected"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; cat moving upwards."
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; EXAMPLE:"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; (move-left (initial-world 10))->"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (make-world (make-cat 150 10 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 9 #"move-left"
0 0 17 3 2 #" ("
0 0 17 3 13 #"initial-world"
0 0 17 3 7 #" 25))->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 2 #"25"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 2 #"25"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 8 #") false)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural Decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-left"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 11 #"left-helper"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"left-helper"
0 0 23 3 1 #"("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"))("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; left-helper: Cat Cat Boolean -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; GIVEN: Two Cats and the boolean value to check if the world is pau"
 #"sed."
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; (left-helper (make-cat 20 30 true \"west\"))->(make-cat 12 30 true"
 #" \"west\")"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 11 #"left-helper"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 11 #"\"east\"))->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"92"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 8 #" \"west\")"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"left-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"cat-move-left"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; cat-move-left : Number Number Boolean Direction -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; GIVEN: The X and Y coordinates of the position of the Cat"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; and a boolean value to see if it has been selected as well"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; as the direction in which the cat is moving in."
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; RETURNS: A Cat "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 65
(
 #"; (cat-move-left 20 30 true \"west\")->(make-cat 12 30 true \"west\""
 #")"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 13 #"cat-move-left"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 10 #"\"west\")->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"92"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 8 #" \"west\")"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cat-move-left"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"CATSPEED"
0 0 23 3 2 #") "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 5 #"x-pos"
0 0 23 3 1 #" "
0 0 14 3 5 #"y-pos"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; world-after-mouse-event : World Number Number CatMouseEvent -> Wor"
 #"ld"
) 0 0 23 29 1 #"\n"
0 0 17 3 51 #"; GIVEN: a world and a description of a mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; along with new mouse position in terms of X and Y."
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; RETURNS: the world that should follow the given mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; EXAMPLE"
0 0 17 3 2 #"S:"
0 0 23 29 1 #"\n"
0 0 17 3 68
(
 #"; (world-after-mouse-event (initial-world 10) 20 30 \"button-down\")"
 #"->"
) 0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (make-world (make-cat 150 10 false \"south\") "
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 10 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 23 #"world-after-mouse-event"
0 0 17 3 2 #" ("
0 0 17 3 13 #"initial-world"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 2 #") "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 16 #"\"button-down\")->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 2 #") "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 2 #") "
0 0 17 3 6 #"false)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; DESIGN STRATEGY: Structural Decomposition on w : World"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat1"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-cat2"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 13 #"world-paused?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; cat-after-mouse-event : Cat Number Number CatMouseEvent -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; GIVEN: a cat and a description of a mouse event along"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; with X and Y coordinates of the mouse."
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; RETURNS: the cat that should follow the given mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; EXAMPLES:  "
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; (cat-after-mouse-event "
0 0 23 29 1 #"\n"
0 0 17 3 54
#"; (make-cat 10 20 true \"north\") 50 50 \"button-down\")->"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 10 20 true \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 21 #"cat-after-mouse-event"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"101"
0 0 17 3 1 #" "
0 0 17 3 3 #"202"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"north\""
0 0 17 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 5 #"; 150"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 17 #"\"button-down\")->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"101"
0 0 17 3 1 #" "
0 0 17 3 3 #"202"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 68
#"; DESIGN STRATEGY: structural Decomposition on mev : CatMouseEvents "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 3 #") ("
0 0 14 3 21 #"cat-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 23 3 3 #") ("
0 0 14 3 14 #"cat-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 23 3 2 #")("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"my"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; cat-after-button-down : Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; GIVEN: A Cat and a location in terms of X and Y coordinates."
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; RETURNS: the cat following a button-down at the given location."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; (cat-after-button-down (make-cat 10 20 true \"north\") 50 50)->"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 10 20 true \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 21 #"cat-after-button-down"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"12"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"north\""
0 0 17 3 2 #") "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 5 #"50)->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"12"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"cat-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 7 #"in-cat?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; cat-after-drag : Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; GIVEN: A Cat and a location in terms of X and Y coordinates."
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; RETURNS: the cat following a drag at the given location."
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; (cat-after-drag (make-cat 20 30 true \"south\")50 50)->"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; (make-cat 50 50 true \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 14 #"cat-after-drag"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"200"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 1 #")"
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 5 #"50)->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 2 #"50"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; DEFIITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"cat-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; cat-after-button-up : Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; GIVEN: A Cat and a location in terms of X and Y coordinates."
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; RETURNS: The Cat following a button-up at the given location."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; (cat-after-button-up (make-cat 20 30 true \"south\")50 50)->"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; (make-cat 20 30 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 19 #"cat-after-button-up"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"210"
0 0 17 3 1 #" "
0 0 17 3 3 #"230"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 1 #")"
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 3 #"50)"
0 0 23 29 1 #"\n"
0 0 17 3 5 #"; ->("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"210"
0 0 17 3 1 #" "
0 0 17 3 3 #"230"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cat-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; cat-dragged-outside-canvas: Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: A Cat and a location where the mouse is pointing"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; RETURNS: A Cat"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; (cat-dragged-outside-canvas (make-cat 10 20 true \"north\") 500 50"
 #"0)->"
) 0 0 23 29 1 #"\n"
0 0 17 3 11 #"; (make-cat"
0 0 17 3 1 #" "
0 6          10 17 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 17 3 18 #" 20 false \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 67
(
 #"; (cat-dragged-outside-canvas (make-cat 10 20 true \"north\") 10 500"
 #")"
) 0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 6          10 17 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 17 3 18 #" 20 false \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #")("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; cat-checked-at-boundary : Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; GIVEN: A Cat and a location where the mouse is pointing"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; RETURNS: A Cat"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 67
(
 #"; (cat-checked-at-boundary (make-cat 10 20 true \"north\") 500 500)-"
 #">"
) 0 0 23 29 1 #"\n"
0 0 17 3 32 #"; (make-cat 10 20 false \"north\")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 23 #"cat-checked-at-boundary"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 2 #"45"
0 0 17 3 1 #" "
0 0 17 3 4 #"true"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 2 #") "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 7 #"500) ->"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 2 #"35"
0 0 17 3 1 #" "
0 0 17 3 2 #"45"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 3 #"and"
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 4 #"ZERO"
0 0 23 3 2 #")("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 4 #"ZERO"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 3 #"and"
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 4 #"ZERO"
0 0 23 3 2 #")("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 3 #"and"
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 2 #")("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"   [("
0 0 14 3 3 #"and"
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 2 #")("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 4 #"ZERO"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 4 #"))] "
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; in-cat? : Cat Number Number -> Cat"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; GIVEN: A Cat and a location in terms of X and Y coordinates."
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; RETURNS: true iff the given coordinate is inside the bounding box "
 #"of"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #"; the given cat."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; (in-cat? (make-cat 50 100 true \"east\") 25 90)->true"
0 0 23 29 1 #"\n"
0 0 17 3 56
#"; (in-cat? (make-cat 50 100 true \"east\") 250 900)->false"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"in-cat?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"x"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-x-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 14 #"HALF-CAT-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-y-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 15 #"HALF-CAT-HEIGHT"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; initial-world : Number -> World"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; GIVEN: a y coordinate"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: a World with two unselected cats, spaced evenly across th"
 #"e"
) 0 0 23 29 1 #"\n"
0 0 17 3 67
#"; canvas in the x-direction, and falling, and placed at the given y"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; coordinate."
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; EXAMPLE:"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; (initial-world 30)->(make-world (make-cat 150 30 false \"south\")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (make-cat 300 30 false \"south\") false)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 13 #"initial-world"
0 0 17 3 1 #" "
0 0 17 3 7 #"110)->("
0 0 17 3 10 #"make-world"
0 0 17 3 2 #" ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"150"
0 0 17 3 1 #" "
0 0 17 3 3 #"110"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 8 #"make-cat"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 3 #"110"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"south\""
0 0 17 3 2 #") "
0 0 17 3 6 #"false)"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; DESIGN STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT2-X-COORD"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 5 #"false"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; cat-north? : Cat -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A Cat c"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; RETURNS: true iff the Cat is moving in north direction"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; (cat-north? (make-cat 10 20 true \"north\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; (cat-north? (make-cat 10 20 true \"south\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"cat-north?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"north?"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; north? : Direction -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; GIVEN : The Direction in which the cat is moving. "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; RETURNS: True iff the Cat is moving in north direction."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (north? (make-cat 10 20 true \"north\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; (north? (make-cat 10 20 true \"south\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; DESIGN STRATEGY: Structural Decomposition on dir : Direction"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; DEFINITION:  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"north?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; cat-south? : Cat -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A Cat c"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; RETURNS: true iff the Cat is moving in south direction"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; (cat-south? (make-cat 10 20 true \"north\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; (cat-south? (make-cat 10 20 true \"south\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"cat-south?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"south?"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; south? : Direction -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; GIVEN : The Direction in which the cat is moving. "
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; RETURNS: True iff the Cat is moving in south direction."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; (south? (make-cat 10 20 true \"north\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (south? (make-cat 10 20 true \"south\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; DESIGN STRATEGY: Structural Decomposition on dir : Direction"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; DEFINITION:  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"south?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; cat-east? : Cat -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A Cat c"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; RETURNS: true iff the Cat is moving in east direction"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (cat-east? (make-cat 10 20 true \"west\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; (cat-east? (make-cat 10 20 true \"east\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-east?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"east?"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; east? : Direction -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; GIVEN : The Direction in which the cat is moving. "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; RETURNS: True iff the Cat is moving in east direction."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (east? (make-cat 10 20 true \"west\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; (east? (make-cat 10 20 true \"east\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; DESIGN STRATEGY: Structural Decomposition on dir : Direction"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; DEFINITION:  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"east?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; cat-west? : Cat -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: A Cat c"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; RETURNS: true iff the Cat is moving in west direction"
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; EXAMPLES: "
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; (cat-west? (make-cat 10 20 true \"west\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (cat-west? (make-cat 10 20 true \"east\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; DESIGN STRATEGY: Structural Decomposition on c : Cat"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; DEFINITION:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cat-west?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"west?"
0 0 23 3 1 #"("
0 0 14 3 7 #"cat-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; west? : Direction -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; GIVEN : The Direction in which the cat is moving. "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; RETURNS: True iff the Cat is moving in west direction."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; (west? (make-cat 10 20 true \"west\"))->true"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (west? (make-cat 10 20 true \"east\"))->false"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; DESIGN STRATEGY: Structural Decomposition on dir : Direction"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; DEFINITION:  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"west?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";; TESTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 19 #"bouncing-cats-tests"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; TEST to create initial world"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #")("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 19 3 32 #"\"failed to create initial world\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; TEST to check world-after-tick"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 16 #"world-after-tick"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 19 3 34 #"\"failed to check world-after-tick\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 16 #"world-after-tick"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; TEST to check cat-after-tick"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 1 #" "
0 0 14 3 18 #"selected-cat-at-20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 19 3 43 #"\"error:cat-after-tick when cat is selected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 19 3 41 #"\"error:cat-after-tick when cat is paused\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; cat selected"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 1 #" "
0 0 14 3 18 #"selected-cat-at-20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 14 3 18 #"selected-cat-at-20"
0 0 19 3 29 #"\"selected cat shouldn't move\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; cat unselected"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-tick"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 66
#"\"unselected cat should fall CATSPEED pixels and remain unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; TEST to check cat-after-tick-helper"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 39 #"\"failed to check cat-after-tick-helper\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"180"
0 0 23 3 1 #" "
0 0 20 3 3 #"220"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"188"
0 0 23 3 1 #" "
0 0 20 3 3 #"220"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 39 #"\"failed to check cat-after-tick-helper\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"180"
0 0 23 3 1 #" "
0 0 20 3 3 #"220"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"172"
0 0 23 3 1 #" "
0 0 20 3 3 #"220"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 39 #"\"failed to check cat-after-tick-helper\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-tick-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 6          10 59 6 #"133/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 39 #"\"failed to check cat-after-tick-helper\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; TEST for  north-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"north-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 4 #"66.5"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 22 #"\"north helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"north-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"142"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 22 #"\"north helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; TEST for  south-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"south-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 22 #"\"south helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"south-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"158"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 22 #"\"south helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"south-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 6          10 59 6 #"667/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 22 #"\"south helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; TEST for  east-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"east-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 21 #"\"east helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"east-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"208"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 21 #"\"east helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"east-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"809/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 21 #"\"east helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; TEST for west-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"west-helper"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 4 #"45.5"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 21 #"\"west helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"west-helper"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"192"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 21 #"\"west helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; TEST for world-to-scene"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"world-to-scene"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT2-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 19 3 46 #"\"failed to portray the given world as a scene\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; TEST for place-cat function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"place-cat"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #")("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"CAT-IMAGE"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 32 #"\"place-cat function not working\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; TESTS to check world-after-key-event"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"q\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 31 #"\"world-after-key-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; TEST for world-with-paused-toggled"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 25 #"world-with-paused-toggled"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 39 #"\"world-with-paused-toggled not working\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; TEST for move-up function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 7 #"move-up"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 26 #"\"move-up function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; TEST for up-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"up-helper"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 11 #"))         "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 19 #"\"up-helper failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; TEST for cat-move-up function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"cat-move-up"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 30 #"\"cat-move-up function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; TEST for move-down function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"move-down"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 28 #"\"move-down function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; TEST for down-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"down-helper"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"38"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 30 #"\"down-helper function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; TEST for cat-move-down function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 13 #"cat-move-down"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"38"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 32 #"\"cat-move-down function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; TEST for move-right function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"move-right"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 29 #"\"move-right function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";;TEST for right-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 12 #"right-helper"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 31 #"\"right-helper function failure\""
0 0 23 3 6 #")     "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; TEST for cat-move-right function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-move-right"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 33 #"\"cat-move-right function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; TEST for move-left function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"move-left"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 28 #"\"move-left function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; TEST for left-helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 11 #"left-helper"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 30 #"\"left-helper function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; TEST for cat-move-left function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 13 #"cat-move-left"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 32 #"\"cat-move-left function failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; TEST for world-after-mouse-event"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 33 #"\"world-after-mouse-event failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; TEST for cat-after-mouse-event"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 30 #"\"cat-after-mouse-evet failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 30 #"\"cat-after-mouse-evet failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 30 #"\"cat-after-mouse-evet failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"move\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 19 3 30 #"\"cat-after-mouse-evet failure\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; TEST for selecting cat(button-down)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-button-down"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 18 #"\"cat not selected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 21 #"cat-after-button-down"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 18 #"\"cat not selected\""
0 0 23 3 12 #")           "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; TESTS for dragging the cat"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-drag"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 23 #"\"cat not being dragged\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 14 #"cat-after-drag"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 23 #"\"cat not being dragged\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; TESTS after releasing the cat(button-up)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 29 #"\"cat not released/unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 29 #"\"cat not released/unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #") "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 6          10 59 6 #"117/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 29 #"\"cat not released/unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 29 #"\"cat not released/unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 19 #"cat-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"225"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"225"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"225"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 29 #"\"cat not released/unselected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; TESTS to check if cat is dragged outside the canvas"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 3 #"-11"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"-11"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 6          10 59 6 #"683/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"825/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"450"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"825/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"450"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"825/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 26 #"cat-dragged-outside-canvas"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 36 #"\"cat not dragged outside the canvas\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; TESTS to check cat-checked-at-boundary helper function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #" "
0 0 20 3 3 #"-11"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 6          10 59 6 #"117/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 1 #")"
0 0 19 3 38 #"\"cat not dragged outside the boundary\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 5 #"75/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 6          10 59 6 #"683/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 19 3 38 #"\"cat not dragged outside the boundary\""
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"825/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 6          10 59 6 #"683/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 1 #")"
0 0 19 3 38 #"\"cat not dragged outside the boundary\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 23 #"cat-checked-at-boundary"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 6          10 59 6 #"825/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 6          10 59 6 #"117/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 1 #")"
0 0 19 3 38 #"\"cat not dragged outside the boundary\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; TESTS to check if mouse is pointing inside the bounding box of ca"
 #"t"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 7 #"in-cat?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"90"
0 0 23 3 1 #")"
0 0 14 3 4 #"true"
0 0 19 3 35 #"\"mouse not pointing inside the cat\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 7 #"in-cat?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 20 3 3 #"250"
0 0 23 3 1 #" "
0 0 20 3 3 #"900"
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 19 3 35 #"\"mouse not pointing inside the cat\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";inside the cat"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 7 #"in-cat?"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-20"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 20 3 2 #"15"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 19 3 35 #"\"test of in-cat? with nearby point\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";a coordinate not inside the cat"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 7 #"in-cat?"
0 0 23 3 1 #" "
0 0 14 3 20 #"unselected-cat-at-20"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 12 #"CAT1-X-COORD"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #") "
0 0 20 3 2 #"15"
0 0 23 3 1 #")"
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 19 3 36 #"\"test of in-cat? with distant point\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; TEST to see if the cat is moving in north direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-north?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #"))"
0 0 14 3 4 #"true"
0 0 19 3 30 #"\"cat not moving towards north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-north?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-north?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-north?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards north\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; TEST to see if the cat is moving in south direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-south?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 14 3 4 #"true"
0 0 19 3 30 #"\"cat not moving towards south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-south?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-south?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 10 #"cat-south?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 26 #"\"cat moving towards south\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; TEST to see if the cat is moving in east direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-east?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 14 3 4 #"true"
0 0 19 3 29 #"\"cat not moving towards east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-east?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 25 #"\"cat moving towards east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-east?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 25 #"\"cat moving towards east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-east?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 25 #"\"cat moving towards east\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; TEST to see if the cat is moving in west direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-west?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"west\""
0 0 23 3 2 #"))"
0 0 14 3 4 #"true"
0 0 19 3 29 #"\"cat not moving towards west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-west?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"north\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 29 #"\"cat not moving towards west\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-west?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"east\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 29 #"\"cat not moving towards west\""
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #"("
0 0 14 3 9 #"cat-west?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"make-cat"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"south\""
0 0 23 3 2 #"))"
0 0 14 3 5 #"false"
0 0 19 3 25 #"\"cat moving towards west\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 19 #"bouncing-cats-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0           0
